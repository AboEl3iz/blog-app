import { Injectable, Logger } from '@nestjs/common';
import { CreateGenerateAiReplyDto } from './dto/create-generate-ai.dto';
import { UpdateGenerateAiDto } from './dto/update-generate-ai.dto';
import { GoogleGenAI } from '@google/genai';
import { ConfigService } from '@nestjs/config';
import { CreateGenerateAiIdeasDto } from './dto/create-generate-ai-ideas';

@Injectable()
export class GenerateAiService {


  genai: GoogleGenAI;

  constructor(private configService: ConfigService) {
    this.genai = new GoogleGenAI({
      apiKey: this.configService.get<string>('OPENAI_API_KEY'),
    });
  }
  async generateReply(createGenerateAiDto: CreateGenerateAiReplyDto) {
    const { content, authername, posttitle } = createGenerateAiDto;
    const prompt = `Generate a reply to the following comment: "${content}" from ${authername} on the post titled "${posttitle}".`;
    const result = this.generateReplyPromote(content, posttitle, authername);;
   const response = await this.genai.models.generateContent({
      model: 'gemini-1.5-flash',
      contents: result
    });
    const rawOutput = response.candidates![0]?.content?.parts![0].text || '';
    console.log("AI Response:", response.candidates![0] ? response.candidates![0].content!.parts![0].text : "No content generated");
    if (!rawOutput) {
      throw new Error("No content generated by AI");
    }
    const start = rawOutput.indexOf('{');
    const end = rawOutput.lastIndexOf('}') + 1;

    // Step 2: Extract JSON substring
    const jsonString = rawOutput.slice(start, end);

    // Step 3: Parse it
    const data = JSON.parse(jsonString);

    // Optional: Validate structure
    if (!data.reply || typeof data.reply !== 'string') {
      throw new Error("Invalid reply format");
    }

    return data;
  }

  async generatePostIdeas(createGenerateAiDto: CreateGenerateAiIdeasDto) {
    const { topic } = createGenerateAiDto;
    const prompt = `Generate blog post ideas based on the following content: "${topic}".`;
    const result = this.generatePostIdeasPromote(topic);
    const response = await this.genai.models.generateContent({
      model: 'gemini-1.5-flash',
      contents: result
    });
    const rawOutput = response.candidates![0]?.content?.parts![0].text || '';
    console.log("AI Response:", response.candidates![0] ? response.candidates![0].content!.parts![0].text : "No content generated");
    if (!rawOutput) {
      throw new Error("No content generated by AI");
    }
    const start = rawOutput.indexOf('{');
    const end = rawOutput.lastIndexOf('}') + 1;

    // Step 2: Extract JSON substring
    const jsonString = rawOutput.slice(start, end);

    // Step 3: Parse it
    const data = JSON.parse(jsonString);

   

    return data;
  }

  async generatePost(createGenerateAiDto: CreateGenerateAiIdeasDto) {
    const { topic } = createGenerateAiDto;
    const prompt = `Generate blog post ideas based on the following content: "${topic}".`;
    const result = this.generatePostPromote(topic);
    const response = await this.genai.models.generateContent({
      model: 'gemini-1.5-flash',
      contents: result
    });
    const rawOutput = response.candidates![0]?.content?.parts![0].text || '';
    console.log("AI Response:", response.candidates![0] ? response.candidates![0].content!.parts![0].text : "No content generated");
    if (!rawOutput) {
      throw new Error("No content generated by AI");
    }
    const start = rawOutput.indexOf('{');
    const end = rawOutput.lastIndexOf('}') + 1;

    // Step 2: Extract JSON substring
    const jsonString = rawOutput.slice(start, end);

    // Step 3: Parse it
    const data = JSON.parse(jsonString);

   

    return data;
  }

  generateReplyPromote(commentContent: string, postTitle: string, authorName: string) {


    return `You are an AI assistant that responds to blog comments in a natural, friendly tone.

        Given the blog post title, the name of the commenter, and the comment content, write a relevant and polite reply.

        The reply should:
        - Be 1â€“2 sentences
        - Acknowledge the commenter
        - Match the context of the comment
        - Be appropriate for the blog post topic

        Respond with valid JSON only in the following format:

        {
          "reply": string  // AI-generated reply
        }

        Post Title: ${postTitle}
        Comment Author: ${authorName}
        Comment: "${commentContent}"

        Output JSON only. Do not add any explanations or markdown.

        `
  }

  generatePostIdeasPromote(topic: string) {


    return `You are an AI content strategist helping generate blog post ideas.

        Given a general topic or keyword, return a creative blog post idea in the following JSON format:

        {
          "title": string,     // A catchy blog post title
          "tags": string[]     // 3 to 5 relevant tags related to the title
        }

        The title should be relevant to developers, technical writers, or tech learners.
        The tags should be lowercase, single words, and closely related to the title.

        Topic: "${topic}"

        Respond with valid JSON only. Do not include any explanation or formatting.


        `
  }

  generatePostPromote(topic: string) {


    return `You are an AI blog writer.

      Generate a new blog post about the following topic.

      The output must be in valid JSON format and match this structure:

      {
        "title": string,              // A compelling blog post title
        "content": string,            // Full blog content (at least 3 paragraphs)
        "coverImage": string | null,  // Optional image URL, or null if not needed
        "tags": string[],             // 3 to 5 relevant tags
        "isDraft": false,             // Always false for generated posts
        "generatedByAI": true         // Always true
      }

      Topic: "${topic}"

      Respond with JSON only. Do not include any commentary or explanation.`
  }
}
